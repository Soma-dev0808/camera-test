{"version":3,"sources":["SelbyComponent/SideBar.js","ImageUploadComponents/SingleImageUpload.js","ImageUploadComponents/DragImageTest.js","App.js","serviceWorker.js","index.js"],"names":["SideBarComponent","Component","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","thumbsContainer","flexWrap","marginTop","thumb","border","marginBottom","marginRight","width","height","boxSizing","thumbInner","minWidth","overflow","img","StyledDropzone","props","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","concat","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","thumbs","key","name","src","useEffect","console","log","forEach","revokeObjectURL","filepath","path","size","className","type","DragImageTest","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAOeA,I,wCCLyCC,Y,qBCSxD,IAAMC,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBC,MAAO,UACPC,QAAS,OACTC,WAAY,2BAGRC,EAAc,CAClBN,YAAa,WAGTO,EAAc,CAClBP,YAAa,WAGTQ,EAAc,CAClBR,YAAa,WAGTS,EAAkB,CACtBf,QAAS,OACTC,cAAe,MACfe,SAAU,OACVC,UAAW,IAGPC,EAAQ,CACZlB,QAAS,cACTK,aAAc,EACdc,OAAQ,oBACRC,aAAc,EACdC,YAAa,EACbC,MAAO,IACPC,OAAQ,IACRpB,QAAS,EACTqB,UAAW,cAGPC,EAAa,CACjBzB,QAAS,OACT0B,SAAU,EACVC,SAAU,UAGNC,EAAM,CACV5B,QAAS,QACTsB,MAAO,OACPC,OAAQ,QAGV,SAASM,EAAeC,GAAQ,IAAD,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,OASzBC,YAAY,CACdC,OAAQ,UACRC,OAAQ,SAACC,GACPJ,EACED,EAAMM,OACJD,EAAcE,KAAI,SAACC,GAAD,OAChBC,OAAOC,OAAOF,EAAM,CAClBG,QAASC,IAAIC,gBAAgBL,aAbvCM,EAH2B,EAG3BA,aACAC,EAJ2B,EAI3BA,cACAC,EAL2B,EAK3BA,aACAC,EAN2B,EAM3BA,aACAC,EAP2B,EAO3BA,aACAb,EAR2B,EAQ3BA,cAgBIc,EAAQC,mBACZ,8BAAC,uCACItD,GACCkD,EAAepC,EAAc,IAC7BqC,EAAepC,EAAc,IAC7BqC,EAAepC,EAAc,MAEnC,CAACkC,EAAcE,EAAcD,IAGzBI,EAASrB,EAAMO,KAAI,SAACC,GAAD,OACvB,yBAAKW,MAAOjC,EAAOoC,IAAKd,EAAKe,MAC3B,yBAAKJ,MAAO1B,GACV,yBAAK+B,IAAKhB,EAAKG,QAASQ,MAAOvB,SAKrC6B,qBACE,kBAAM,WACJC,QAAQC,IAAI3B,GAEZA,EAAM4B,SAAQ,SAACpB,GAAD,OAAUI,IAAIiB,gBAAgBrB,EAAKG,eAEnD,CAACX,IAGH,IAAM8B,EAAWzB,EAAcE,KAAI,SAACC,GAAD,OACjC,wBAAIc,IAAKd,EAAKuB,MACXvB,EAAKuB,KADR,MACiBvB,EAAKwB,KADtB,aAKF,OACE,yBAAKC,UAAU,aACb,wBAASnB,EAAa,CAAEK,UACtB,0BAAWJ,KACX,sFACA,4BAAQmB,KAAK,UAAb,qBAEF,+BACE,qCACA,4BAAKJ,IAEP,2BAAOX,MAAOpC,GAAkBsC,IAKvBc,MA5If,WACE,OACE,6BACE,kBAACtC,EAAD,QCOSuC,MAJf,WACE,OAAO,kBAAC,EAAD,OCEWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.3f4347fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nfunction SideBarComponent() {\r\n  return <div>SlideBar</div>;\r\n}\r\n\r\nexport default SideBarComponent;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class SingleImageUploadComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: null,\r\n    };\r\n    this.uploadSingleFile = this.uploadSingleFile.bind(this);\r\n    this.upload = this.upload.bind(this);\r\n  }\r\n\r\n  uploadSingleFile(e) {\r\n    this.setState({\r\n      file: URL.createObjectURL(e.target.files[0]),\r\n    });\r\n  }\r\n\r\n  upload(e) {\r\n    e.preventDefault();\r\n    console.log(this.state.file);\r\n  }\r\n\r\n  render() {\r\n    let imgPreview;\r\n    if (this.state.file) {\r\n      imgPreview = <img src={this.state.file} alt=\"\" />;\r\n    }\r\n    return (\r\n      <form>\r\n        <div className=\"form-group preview\">{imgPreview}</div>\r\n\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"form-control\"\r\n            onChange={this.uploadSingleFile}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-block\"\r\n          onClick={this.upload}\r\n        >\r\n          Upload\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nfunction DragImageTest() {\r\n  return (\r\n    <div>\r\n      <StyledDropzone />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst thumbsContainer = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  marginTop: 16,\r\n};\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 200,\r\n  height: 200,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nfunction StyledDropzone(props) {\r\n  const [files, setFiles] = useState([]);\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop: (acceptedFiles) => {\r\n      setFiles(\r\n        files.concat(\r\n          acceptedFiles.map((file) =>\r\n            Object.assign(file, {\r\n              preview: URL.createObjectURL(file),\r\n            })\r\n          )\r\n        )\r\n      );\r\n    },\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const thumbs = files.map((file) => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img src={file.preview} style={img} />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  useEffect(\r\n    () => () => {\r\n      console.log(files);\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files]\r\n  );\r\n\r\n  const filepath = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div {...getRootProps({ style })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n        <button type=\"button\">Open File Dialog</button>\r\n      </div>\r\n      <aside>\r\n        <h4>Files</h4>\r\n        <ul>{filepath}</ul>\r\n      </aside>\r\n      <aside style={thumbsContainer}>{thumbs}</aside>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DragImageTest;\r\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n// import CameraComponent from \"./ChildComponents/CameraComponent\";\nimport SlideBarComponent from \"./SelbyComponent/SideBar\";\nimport SingleUploadComponent from \"./ImageUploadComponents/SingleImageUpload\";\nimport DragImageTest from \"./ImageUploadComponents/DragImageTest\";\n\nfunction App() {\n  return <DragImageTest />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}